// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ConnectionsProto.capnp

#include "ConnectionsProto.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<67> b_a60a2cb3c7dc0231 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     49,   2, 220, 199, 179,  44,  10, 166,
     39,   0,   0,   0,   1,   0,   1,   0,
    173,  22,   7, 215,  89, 164, 184, 177,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   1,   0,   0,
     45,   0,   0,   0,  55,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 110, 117, 112, 105,
     99,  47, 112, 114, 111, 116, 111,  47,
     67, 111, 110, 110, 101,  99, 116, 105,
    111, 110, 115,  80, 114, 111, 116, 111,
     46,  99,  97, 112, 110, 112,  58,  67,
    111, 110, 110, 101,  99, 116, 105, 111,
    110, 115,  80, 114, 111, 116, 111,   0,
     12,   0,   0,   0,   1,   0,   1,   0,
    230,  40, 163, 232, 252, 235,  92, 246,
     17,   0,   0,   0, 106,   0,   0,   0,
    158, 240, 151, 118, 211, 220, 149, 209,
     17,   0,   0,   0, 106,   0,   0,   0,
    198,  60, 180, 101, 133, 114,  46, 255,
     17,   0,   0,   0,  82,   0,   0,   0,
     83, 121, 110,  97, 112, 115, 101,  80,
    114, 111, 116, 111,   0,   0,   0,   0,
     83, 101, 103, 109, 101, 110, 116,  80,
    114, 111, 116, 111,   0,   0,   0,   0,
     67, 101, 108, 108,  80, 114, 111, 116,
    111,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     64,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     61,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     56,   0,   0,   0,   3,   0,   1,   0,
     68,   0,   0,   0,   2,   0,   1,   0,
     99, 101, 108, 108, 115,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    198,  60, 180, 101, 133, 114,  46, 255,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    118, 101, 114, 115, 105, 111, 110,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      7,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a60a2cb3c7dc0231 = b_a60a2cb3c7dc0231.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a60a2cb3c7dc0231[] = {
  &s_ff2e728565b43cc6,
};
static const uint16_t m_a60a2cb3c7dc0231[] = {0, 1};
static const uint16_t i_a60a2cb3c7dc0231[] = {0, 1};
const ::capnp::_::RawSchema s_a60a2cb3c7dc0231 = {
  0xa60a2cb3c7dc0231, b_a60a2cb3c7dc0231.words, 67, d_a60a2cb3c7dc0231, m_a60a2cb3c7dc0231,
  1, 2, i_a60a2cb3c7dc0231, nullptr, nullptr, { &s_a60a2cb3c7dc0231, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<55> b_f65cebfce8a328e6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230,  40, 163, 232, 252, 235,  92, 246,
     56,   0,   0,   0,   1,   0,   1,   0,
     49,   2, 220, 199, 179,  44,  10, 166,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 110, 117, 112, 105,
     99,  47, 112, 114, 111, 116, 111,  47,
     67, 111, 110, 110, 101,  99, 116, 105,
    111, 110, 115,  80, 114, 111, 116, 111,
     46,  99,  97, 112, 110, 112,  58,  67,
    111, 110, 110, 101,  99, 116, 105, 111,
    110, 115,  80, 114, 111, 116, 111,  46,
     83, 121, 110,  97, 112, 115, 101,  80,
    114, 111, 116, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0, 130,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     48,   0,   0,   0,   3,   0,   1,   0,
     60,   0,   0,   0,   2,   0,   1,   0,
    112, 114, 101, 115, 121, 110,  97, 112,
    116, 105,  99,  67, 101, 108, 108,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 101, 114, 109,  97, 110, 101, 110,
     99, 101,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     10,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f65cebfce8a328e6 = b_f65cebfce8a328e6.words;
#if !CAPNP_LITE
static const uint16_t m_f65cebfce8a328e6[] = {1, 0};
static const uint16_t i_f65cebfce8a328e6[] = {0, 1};
const ::capnp::_::RawSchema s_f65cebfce8a328e6 = {
  0xf65cebfce8a328e6, b_f65cebfce8a328e6.words, 55, nullptr, m_f65cebfce8a328e6,
  0, 2, i_f65cebfce8a328e6, nullptr, nullptr, { &s_f65cebfce8a328e6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<43> b_d195dcd37697f09e = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    158, 240, 151, 118, 211, 220, 149, 209,
     56,   0,   0,   0,   1,   0,   0,   0,
     49,   2, 220, 199, 179,  44,  10, 166,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 110, 117, 112, 105,
     99,  47, 112, 114, 111, 116, 111,  47,
     67, 111, 110, 110, 101,  99, 116, 105,
    111, 110, 115,  80, 114, 111, 116, 111,
     46,  99,  97, 112, 110, 112,  58,  67,
    111, 110, 110, 101,  99, 116, 105, 111,
    110, 115,  80, 114, 111, 116, 111,  46,
     83, 101, 103, 109, 101, 110, 116,  80,
    114, 111, 116, 111,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    115, 121, 110,  97, 112, 115, 101, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    230,  40, 163, 232, 252, 235,  92, 246,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d195dcd37697f09e = b_d195dcd37697f09e.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d195dcd37697f09e[] = {
  &s_f65cebfce8a328e6,
};
static const uint16_t m_d195dcd37697f09e[] = {0};
static const uint16_t i_d195dcd37697f09e[] = {0};
const ::capnp::_::RawSchema s_d195dcd37697f09e = {
  0xd195dcd37697f09e, b_d195dcd37697f09e.words, 43, d_d195dcd37697f09e, m_d195dcd37697f09e,
  1, 1, i_d195dcd37697f09e, nullptr, nullptr, { &s_d195dcd37697f09e, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<43> b_ff2e728565b43cc6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    198,  60, 180, 101, 133, 114,  46, 255,
     56,   0,   0,   0,   1,   0,   0,   0,
     49,   2, 220, 199, 179,  44,  10, 166,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 110, 117, 112, 105,
     99,  47, 112, 114, 111, 116, 111,  47,
     67, 111, 110, 110, 101,  99, 116, 105,
    111, 110, 115,  80, 114, 111, 116, 111,
     46,  99,  97, 112, 110, 112,  58,  67,
    111, 110, 110, 101,  99, 116, 105, 111,
    110, 115,  80, 114, 111, 116, 111,  46,
     67, 101, 108, 108,  80, 114, 111, 116,
    111,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     40,   0,   0,   0,   2,   0,   1,   0,
    115, 101, 103, 109, 101, 110, 116, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    158, 240, 151, 118, 211, 220, 149, 209,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_ff2e728565b43cc6 = b_ff2e728565b43cc6.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ff2e728565b43cc6[] = {
  &s_d195dcd37697f09e,
};
static const uint16_t m_ff2e728565b43cc6[] = {0};
static const uint16_t i_ff2e728565b43cc6[] = {0};
const ::capnp::_::RawSchema s_ff2e728565b43cc6 = {
  0xff2e728565b43cc6, b_ff2e728565b43cc6.words, 43, d_ff2e728565b43cc6, m_ff2e728565b43cc6,
  1, 1, i_ff2e728565b43cc6, nullptr, nullptr, { &s_ff2e728565b43cc6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// ConnectionsProto
constexpr uint16_t ConnectionsProto::_capnpPrivate::dataWordSize;
constexpr uint16_t ConnectionsProto::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ConnectionsProto::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ConnectionsProto::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ConnectionsProto::SynapseProto
constexpr uint16_t ConnectionsProto::SynapseProto::_capnpPrivate::dataWordSize;
constexpr uint16_t ConnectionsProto::SynapseProto::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ConnectionsProto::SynapseProto::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ConnectionsProto::SynapseProto::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ConnectionsProto::SegmentProto
constexpr uint16_t ConnectionsProto::SegmentProto::_capnpPrivate::dataWordSize;
constexpr uint16_t ConnectionsProto::SegmentProto::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ConnectionsProto::SegmentProto::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ConnectionsProto::SegmentProto::_capnpPrivate::schema;
#endif  // !CAPNP_LITE

// ConnectionsProto::CellProto
constexpr uint16_t ConnectionsProto::CellProto::_capnpPrivate::dataWordSize;
constexpr uint16_t ConnectionsProto::CellProto::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind ConnectionsProto::CellProto::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* ConnectionsProto::CellProto::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



