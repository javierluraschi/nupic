// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: SparseBinaryMatrixProto.capnp

#include "SparseBinaryMatrixProto.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<77> b_cae029f961720cf8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    248,  12, 114,  97, 249,  41, 224, 202,
     46,   0,   0,   0,   1,   0,   1,   0,
    202,  68, 189,  10,   9,  17, 158, 205,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  50,   2,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 114,  99,  47, 110, 117, 112, 105,
     99,  47, 112, 114, 111, 116, 111,  47,
     83, 112,  97, 114, 115, 101,  66, 105,
    110,  97, 114, 121,  77,  97, 116, 114,
    105, 120,  80, 114, 111, 116, 111,  46,
     99,  97, 112, 110, 112,  58,  83, 112,
     97, 114, 115, 101,  66, 105, 110,  97,
    114, 121,  77,  97, 116, 114, 105, 120,
     80, 114, 111, 116, 111,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     76,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
    110, 117, 109,  82, 111, 119, 115,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    110, 117, 109,  67, 111, 108, 117, 109,
    110, 115,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105, 110, 100, 105,  99, 101, 115,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_cae029f961720cf8 = b_cae029f961720cf8.words;
#if !CAPNP_LITE
static const uint16_t m_cae029f961720cf8[] = {2, 1, 0};
static const uint16_t i_cae029f961720cf8[] = {0, 1, 2};
const ::capnp::_::RawSchema s_cae029f961720cf8 = {
  0xcae029f961720cf8, b_cae029f961720cf8.words, 77, nullptr, m_cae029f961720cf8,
  0, 3, i_cae029f961720cf8, nullptr, nullptr, { &s_cae029f961720cf8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// SparseBinaryMatrixProto
constexpr uint16_t SparseBinaryMatrixProto::_capnpPrivate::dataWordSize;
constexpr uint16_t SparseBinaryMatrixProto::_capnpPrivate::pointerCount;
#if !CAPNP_LITE
constexpr ::capnp::Kind SparseBinaryMatrixProto::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* SparseBinaryMatrixProto::_capnpPrivate::schema;
#endif  // !CAPNP_LITE



