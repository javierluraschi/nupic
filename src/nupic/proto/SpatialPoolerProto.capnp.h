// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: SpatialPoolerProto.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <nupic/proto/RandomProto.capnp.h>
#include <nupic/proto/SparseBinaryMatrixProto.capnp.h>
#include <nupic/proto/SparseMatrixProto.capnp.h>

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(ed896ca87b7db2e8);

}  // namespace schemas
}  // namespace capnp


struct SpatialPoolerProto {
  SpatialPoolerProto() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ed896ca87b7db2e8, 11, 11)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class SpatialPoolerProto::Reader {
public:
  typedef SpatialPoolerProto Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasRandom() const;
  inline  ::RandomProto::Reader getRandom() const;

  inline  ::uint32_t getNumInputs() const;

  inline  ::uint32_t getNumColumns() const;

  inline bool hasColumnDimensions() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getColumnDimensions() const;

  inline bool hasInputDimensions() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getInputDimensions() const;

  inline  ::uint32_t getPotentialRadius() const;

  inline float getPotentialPct() const;

  inline bool getGlobalInhibition() const;

  inline  ::uint32_t getNumActiveColumnsPerInhArea() const;

  inline float getLocalAreaDensity() const;

  inline  ::uint32_t getStimulusThreshold() const;

  inline float getSynPermInactiveDec() const;

  inline float getSynPermActiveInc() const;

  inline float getSynPermBelowStimulusInc() const;

  inline float getSynPermConnected() const;

  inline float getMinPctOverlapDutyCycles() const;

  inline float getMinPctActiveDutyCycles() const;

  inline  ::uint16_t getDutyCyclePeriod() const;

  inline float getBoostStrength() const;

  inline  ::uint8_t getSpVerbosity() const;

  inline float getSynPermMin() const;

  inline float getSynPermMax() const;

  inline float getSynPermTrimThreshold() const;

  inline  ::uint16_t getUpdatePeriod() const;

  inline  ::uint16_t getVersion() const;

  inline  ::uint32_t getIterationNum() const;

  inline  ::uint32_t getIterationLearnNum() const;

  inline bool hasPotentialPools() const;
  inline  ::SparseBinaryMatrixProto::Reader getPotentialPools() const;

  inline bool hasPermanences() const;
  inline  ::SparseMatrixProto::Reader getPermanences() const;

  inline bool hasTieBreaker() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getTieBreaker() const;

  inline bool hasOverlapDutyCycles() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getOverlapDutyCycles() const;

  inline bool hasActiveDutyCycles() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getActiveDutyCycles() const;

  inline bool hasMinOverlapDutyCycles() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getMinOverlapDutyCycles() const;

  inline bool hasMinActiveDutyCycles() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getMinActiveDutyCycles() const;

  inline bool hasBoostFactors() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getBoostFactors() const;

  inline  ::uint32_t getInhibitionRadius() const;

  inline bool getWrapAround() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SpatialPoolerProto::Builder {
public:
  typedef SpatialPoolerProto Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasRandom();
  inline  ::RandomProto::Builder getRandom();
  inline void setRandom( ::RandomProto::Reader value);
  inline  ::RandomProto::Builder initRandom();
  inline void adoptRandom(::capnp::Orphan< ::RandomProto>&& value);
  inline ::capnp::Orphan< ::RandomProto> disownRandom();

  inline  ::uint32_t getNumInputs();
  inline void setNumInputs( ::uint32_t value);

  inline  ::uint32_t getNumColumns();
  inline void setNumColumns( ::uint32_t value);

  inline bool hasColumnDimensions();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getColumnDimensions();
  inline void setColumnDimensions( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setColumnDimensions(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initColumnDimensions(unsigned int size);
  inline void adoptColumnDimensions(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownColumnDimensions();

  inline bool hasInputDimensions();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getInputDimensions();
  inline void setInputDimensions( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInputDimensions(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initInputDimensions(unsigned int size);
  inline void adoptInputDimensions(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownInputDimensions();

  inline  ::uint32_t getPotentialRadius();
  inline void setPotentialRadius( ::uint32_t value);

  inline float getPotentialPct();
  inline void setPotentialPct(float value);

  inline bool getGlobalInhibition();
  inline void setGlobalInhibition(bool value);

  inline  ::uint32_t getNumActiveColumnsPerInhArea();
  inline void setNumActiveColumnsPerInhArea( ::uint32_t value);

  inline float getLocalAreaDensity();
  inline void setLocalAreaDensity(float value);

  inline  ::uint32_t getStimulusThreshold();
  inline void setStimulusThreshold( ::uint32_t value);

  inline float getSynPermInactiveDec();
  inline void setSynPermInactiveDec(float value);

  inline float getSynPermActiveInc();
  inline void setSynPermActiveInc(float value);

  inline float getSynPermBelowStimulusInc();
  inline void setSynPermBelowStimulusInc(float value);

  inline float getSynPermConnected();
  inline void setSynPermConnected(float value);

  inline float getMinPctOverlapDutyCycles();
  inline void setMinPctOverlapDutyCycles(float value);

  inline float getMinPctActiveDutyCycles();
  inline void setMinPctActiveDutyCycles(float value);

  inline  ::uint16_t getDutyCyclePeriod();
  inline void setDutyCyclePeriod( ::uint16_t value);

  inline float getBoostStrength();
  inline void setBoostStrength(float value);

  inline  ::uint8_t getSpVerbosity();
  inline void setSpVerbosity( ::uint8_t value);

  inline float getSynPermMin();
  inline void setSynPermMin(float value);

  inline float getSynPermMax();
  inline void setSynPermMax(float value);

  inline float getSynPermTrimThreshold();
  inline void setSynPermTrimThreshold(float value);

  inline  ::uint16_t getUpdatePeriod();
  inline void setUpdatePeriod( ::uint16_t value);

  inline  ::uint16_t getVersion();
  inline void setVersion( ::uint16_t value);

  inline  ::uint32_t getIterationNum();
  inline void setIterationNum( ::uint32_t value);

  inline  ::uint32_t getIterationLearnNum();
  inline void setIterationLearnNum( ::uint32_t value);

  inline bool hasPotentialPools();
  inline  ::SparseBinaryMatrixProto::Builder getPotentialPools();
  inline void setPotentialPools( ::SparseBinaryMatrixProto::Reader value);
  inline  ::SparseBinaryMatrixProto::Builder initPotentialPools();
  inline void adoptPotentialPools(::capnp::Orphan< ::SparseBinaryMatrixProto>&& value);
  inline ::capnp::Orphan< ::SparseBinaryMatrixProto> disownPotentialPools();

  inline bool hasPermanences();
  inline  ::SparseMatrixProto::Builder getPermanences();
  inline void setPermanences( ::SparseMatrixProto::Reader value);
  inline  ::SparseMatrixProto::Builder initPermanences();
  inline void adoptPermanences(::capnp::Orphan< ::SparseMatrixProto>&& value);
  inline ::capnp::Orphan< ::SparseMatrixProto> disownPermanences();

  inline bool hasTieBreaker();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getTieBreaker();
  inline void setTieBreaker( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setTieBreaker(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initTieBreaker(unsigned int size);
  inline void adoptTieBreaker(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownTieBreaker();

  inline bool hasOverlapDutyCycles();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getOverlapDutyCycles();
  inline void setOverlapDutyCycles( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setOverlapDutyCycles(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initOverlapDutyCycles(unsigned int size);
  inline void adoptOverlapDutyCycles(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownOverlapDutyCycles();

  inline bool hasActiveDutyCycles();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getActiveDutyCycles();
  inline void setActiveDutyCycles( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setActiveDutyCycles(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initActiveDutyCycles(unsigned int size);
  inline void adoptActiveDutyCycles(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownActiveDutyCycles();

  inline bool hasMinOverlapDutyCycles();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getMinOverlapDutyCycles();
  inline void setMinOverlapDutyCycles( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMinOverlapDutyCycles(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initMinOverlapDutyCycles(unsigned int size);
  inline void adoptMinOverlapDutyCycles(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownMinOverlapDutyCycles();

  inline bool hasMinActiveDutyCycles();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getMinActiveDutyCycles();
  inline void setMinActiveDutyCycles( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setMinActiveDutyCycles(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initMinActiveDutyCycles(unsigned int size);
  inline void adoptMinActiveDutyCycles(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownMinActiveDutyCycles();

  inline bool hasBoostFactors();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getBoostFactors();
  inline void setBoostFactors( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setBoostFactors(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initBoostFactors(unsigned int size);
  inline void adoptBoostFactors(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownBoostFactors();

  inline  ::uint32_t getInhibitionRadius();
  inline void setInhibitionRadius( ::uint32_t value);

  inline bool getWrapAround();
  inline void setWrapAround(bool value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SpatialPoolerProto::Pipeline {
public:
  typedef SpatialPoolerProto Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RandomProto::Pipeline getRandom();
  inline  ::SparseBinaryMatrixProto::Pipeline getPotentialPools();
  inline  ::SparseMatrixProto::Pipeline getPermanences();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool SpatialPoolerProto::Reader::hasRandom() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SpatialPoolerProto::Builder::hasRandom() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::RandomProto::Reader SpatialPoolerProto::Reader::getRandom() const {
  return ::capnp::_::PointerHelpers< ::RandomProto>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::RandomProto::Builder SpatialPoolerProto::Builder::getRandom() {
  return ::capnp::_::PointerHelpers< ::RandomProto>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RandomProto::Pipeline SpatialPoolerProto::Pipeline::getRandom() {
  return  ::RandomProto::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void SpatialPoolerProto::Builder::setRandom( ::RandomProto::Reader value) {
  ::capnp::_::PointerHelpers< ::RandomProto>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::RandomProto::Builder SpatialPoolerProto::Builder::initRandom() {
  return ::capnp::_::PointerHelpers< ::RandomProto>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SpatialPoolerProto::Builder::adoptRandom(
    ::capnp::Orphan< ::RandomProto>&& value) {
  ::capnp::_::PointerHelpers< ::RandomProto>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RandomProto> SpatialPoolerProto::Builder::disownRandom() {
  return ::capnp::_::PointerHelpers< ::RandomProto>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t SpatialPoolerProto::Reader::getNumInputs() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SpatialPoolerProto::Builder::getNumInputs() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setNumInputs( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SpatialPoolerProto::Reader::getNumColumns() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SpatialPoolerProto::Builder::getNumColumns() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setNumColumns( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SpatialPoolerProto::Reader::hasColumnDimensions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool SpatialPoolerProto::Builder::hasColumnDimensions() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader SpatialPoolerProto::Reader::getColumnDimensions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::getColumnDimensions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void SpatialPoolerProto::Builder::setColumnDimensions( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void SpatialPoolerProto::Builder::setColumnDimensions(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::initColumnDimensions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void SpatialPoolerProto::Builder::adoptColumnDimensions(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> SpatialPoolerProto::Builder::disownColumnDimensions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool SpatialPoolerProto::Reader::hasInputDimensions() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool SpatialPoolerProto::Builder::hasInputDimensions() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader SpatialPoolerProto::Reader::getInputDimensions() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::getInputDimensions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void SpatialPoolerProto::Builder::setInputDimensions( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void SpatialPoolerProto::Builder::setInputDimensions(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::initInputDimensions(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void SpatialPoolerProto::Builder::adoptInputDimensions(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> SpatialPoolerProto::Builder::disownInputDimensions() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint32_t SpatialPoolerProto::Reader::getPotentialRadius() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SpatialPoolerProto::Builder::getPotentialRadius() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setPotentialRadius( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getPotentialPct() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getPotentialPct() {
  return _builder.getDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setPotentialPct(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool SpatialPoolerProto::Reader::getGlobalInhibition() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}

inline bool SpatialPoolerProto::Builder::getGlobalInhibition() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setGlobalInhibition(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<128>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SpatialPoolerProto::Reader::getNumActiveColumnsPerInhArea() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SpatialPoolerProto::Builder::getNumActiveColumnsPerInhArea() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setNumActiveColumnsPerInhArea( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getLocalAreaDensity() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getLocalAreaDensity() {
  return _builder.getDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setLocalAreaDensity(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<6>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SpatialPoolerProto::Reader::getStimulusThreshold() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SpatialPoolerProto::Builder::getStimulusThreshold() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setStimulusThreshold( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getSynPermInactiveDec() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getSynPermInactiveDec() {
  return _builder.getDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setSynPermInactiveDec(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getSynPermActiveInc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getSynPermActiveInc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setSynPermActiveInc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getSynPermBelowStimulusInc() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getSynPermBelowStimulusInc() {
  return _builder.getDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setSynPermBelowStimulusInc(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<10>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getSynPermConnected() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getSynPermConnected() {
  return _builder.getDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setSynPermConnected(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<11>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getMinPctOverlapDutyCycles() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getMinPctOverlapDutyCycles() {
  return _builder.getDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setMinPctOverlapDutyCycles(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<12>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getMinPctActiveDutyCycles() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getMinPctActiveDutyCycles() {
  return _builder.getDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setMinPctActiveDutyCycles(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t SpatialPoolerProto::Reader::getDutyCyclePeriod() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t SpatialPoolerProto::Builder::getDutyCyclePeriod() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setDutyCyclePeriod( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<9>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getBoostStrength() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getBoostStrength() {
  return _builder.getDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setBoostStrength(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<14>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t SpatialPoolerProto::Reader::getSpVerbosity() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t SpatialPoolerProto::Builder::getSpVerbosity() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setSpVerbosity( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getSynPermMin() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getSynPermMin() {
  return _builder.getDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setSynPermMin(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<15>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getSynPermMax() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getSynPermMax() {
  return _builder.getDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setSynPermMax(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<16>() * ::capnp::ELEMENTS, value);
}

inline float SpatialPoolerProto::Reader::getSynPermTrimThreshold() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}

inline float SpatialPoolerProto::Builder::getSynPermTrimThreshold() {
  return _builder.getDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setSynPermTrimThreshold(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<17>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t SpatialPoolerProto::Reader::getUpdatePeriod() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t SpatialPoolerProto::Builder::getUpdatePeriod() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setUpdatePeriod( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<36>() * ::capnp::ELEMENTS, value);
}

inline  ::uint16_t SpatialPoolerProto::Reader::getVersion() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t SpatialPoolerProto::Builder::getVersion() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setVersion( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<37>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SpatialPoolerProto::Reader::getIterationNum() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SpatialPoolerProto::Builder::getIterationNum() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setIterationNum( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<19>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SpatialPoolerProto::Reader::getIterationLearnNum() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SpatialPoolerProto::Builder::getIterationLearnNum() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setIterationLearnNum( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<20>() * ::capnp::ELEMENTS, value);
}

inline bool SpatialPoolerProto::Reader::hasPotentialPools() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool SpatialPoolerProto::Builder::hasPotentialPools() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::SparseBinaryMatrixProto::Reader SpatialPoolerProto::Reader::getPotentialPools() const {
  return ::capnp::_::PointerHelpers< ::SparseBinaryMatrixProto>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::SparseBinaryMatrixProto::Builder SpatialPoolerProto::Builder::getPotentialPools() {
  return ::capnp::_::PointerHelpers< ::SparseBinaryMatrixProto>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::SparseBinaryMatrixProto::Pipeline SpatialPoolerProto::Pipeline::getPotentialPools() {
  return  ::SparseBinaryMatrixProto::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void SpatialPoolerProto::Builder::setPotentialPools( ::SparseBinaryMatrixProto::Reader value) {
  ::capnp::_::PointerHelpers< ::SparseBinaryMatrixProto>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::SparseBinaryMatrixProto::Builder SpatialPoolerProto::Builder::initPotentialPools() {
  return ::capnp::_::PointerHelpers< ::SparseBinaryMatrixProto>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void SpatialPoolerProto::Builder::adoptPotentialPools(
    ::capnp::Orphan< ::SparseBinaryMatrixProto>&& value) {
  ::capnp::_::PointerHelpers< ::SparseBinaryMatrixProto>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SparseBinaryMatrixProto> SpatialPoolerProto::Builder::disownPotentialPools() {
  return ::capnp::_::PointerHelpers< ::SparseBinaryMatrixProto>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool SpatialPoolerProto::Reader::hasPermanences() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool SpatialPoolerProto::Builder::hasPermanences() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::SparseMatrixProto::Reader SpatialPoolerProto::Reader::getPermanences() const {
  return ::capnp::_::PointerHelpers< ::SparseMatrixProto>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::SparseMatrixProto::Builder SpatialPoolerProto::Builder::getPermanences() {
  return ::capnp::_::PointerHelpers< ::SparseMatrixProto>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::SparseMatrixProto::Pipeline SpatialPoolerProto::Pipeline::getPermanences() {
  return  ::SparseMatrixProto::Pipeline(_typeless.getPointerField(4));
}
#endif  // !CAPNP_LITE
inline void SpatialPoolerProto::Builder::setPermanences( ::SparseMatrixProto::Reader value) {
  ::capnp::_::PointerHelpers< ::SparseMatrixProto>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::SparseMatrixProto::Builder SpatialPoolerProto::Builder::initPermanences() {
  return ::capnp::_::PointerHelpers< ::SparseMatrixProto>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void SpatialPoolerProto::Builder::adoptPermanences(
    ::capnp::Orphan< ::SparseMatrixProto>&& value) {
  ::capnp::_::PointerHelpers< ::SparseMatrixProto>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::SparseMatrixProto> SpatialPoolerProto::Builder::disownPermanences() {
  return ::capnp::_::PointerHelpers< ::SparseMatrixProto>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool SpatialPoolerProto::Reader::hasTieBreaker() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool SpatialPoolerProto::Builder::hasTieBreaker() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader SpatialPoolerProto::Reader::getTieBreaker() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::getTieBreaker() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void SpatialPoolerProto::Builder::setTieBreaker( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void SpatialPoolerProto::Builder::setTieBreaker(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::initTieBreaker(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void SpatialPoolerProto::Builder::adoptTieBreaker(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> SpatialPoolerProto::Builder::disownTieBreaker() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool SpatialPoolerProto::Reader::hasOverlapDutyCycles() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool SpatialPoolerProto::Builder::hasOverlapDutyCycles() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader SpatialPoolerProto::Reader::getOverlapDutyCycles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::getOverlapDutyCycles() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void SpatialPoolerProto::Builder::setOverlapDutyCycles( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline void SpatialPoolerProto::Builder::setOverlapDutyCycles(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::initOverlapDutyCycles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void SpatialPoolerProto::Builder::adoptOverlapDutyCycles(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> SpatialPoolerProto::Builder::disownOverlapDutyCycles() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool SpatialPoolerProto::Reader::hasActiveDutyCycles() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool SpatialPoolerProto::Builder::hasActiveDutyCycles() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader SpatialPoolerProto::Reader::getActiveDutyCycles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::getActiveDutyCycles() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void SpatialPoolerProto::Builder::setActiveDutyCycles( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline void SpatialPoolerProto::Builder::setActiveDutyCycles(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::initActiveDutyCycles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void SpatialPoolerProto::Builder::adoptActiveDutyCycles(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> SpatialPoolerProto::Builder::disownActiveDutyCycles() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline bool SpatialPoolerProto::Reader::hasMinOverlapDutyCycles() const {
  return !_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline bool SpatialPoolerProto::Builder::hasMinOverlapDutyCycles() {
  return !_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader SpatialPoolerProto::Reader::getMinOverlapDutyCycles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::getMinOverlapDutyCycles() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}
inline void SpatialPoolerProto::Builder::setMinOverlapDutyCycles( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline void SpatialPoolerProto::Builder::setMinOverlapDutyCycles(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::initMinOverlapDutyCycles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), size);
}
inline void SpatialPoolerProto::Builder::adoptMinOverlapDutyCycles(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> SpatialPoolerProto::Builder::disownMinOverlapDutyCycles() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<8>() * ::capnp::POINTERS));
}

inline bool SpatialPoolerProto::Reader::hasMinActiveDutyCycles() const {
  return !_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline bool SpatialPoolerProto::Builder::hasMinActiveDutyCycles() {
  return !_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader SpatialPoolerProto::Reader::getMinActiveDutyCycles() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::getMinActiveDutyCycles() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}
inline void SpatialPoolerProto::Builder::setMinActiveDutyCycles( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline void SpatialPoolerProto::Builder::setMinActiveDutyCycles(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::initMinActiveDutyCycles(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), size);
}
inline void SpatialPoolerProto::Builder::adoptMinActiveDutyCycles(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> SpatialPoolerProto::Builder::disownMinActiveDutyCycles() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<9>() * ::capnp::POINTERS));
}

inline bool SpatialPoolerProto::Reader::hasBoostFactors() const {
  return !_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline bool SpatialPoolerProto::Builder::hasBoostFactors() {
  return !_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader SpatialPoolerProto::Reader::getBoostFactors() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::getBoostFactors() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}
inline void SpatialPoolerProto::Builder::setBoostFactors( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline void SpatialPoolerProto::Builder::setBoostFactors(::kj::ArrayPtr<const float> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder SpatialPoolerProto::Builder::initBoostFactors(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), size);
}
inline void SpatialPoolerProto::Builder::adoptBoostFactors(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> SpatialPoolerProto::Builder::disownBoostFactors() {
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<10>() * ::capnp::POINTERS));
}

inline  ::uint32_t SpatialPoolerProto::Reader::getInhibitionRadius() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SpatialPoolerProto::Builder::getInhibitionRadius() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setInhibitionRadius( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<21>() * ::capnp::ELEMENTS, value);
}

inline bool SpatialPoolerProto::Reader::getWrapAround() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}

inline bool SpatialPoolerProto::Builder::getWrapAround() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS);
}
inline void SpatialPoolerProto::Builder::setWrapAround(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<129>() * ::capnp::ELEMENTS, value);
}


