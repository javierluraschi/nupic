// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ArrayProto.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(87e317a98dbf317d);

}  // namespace schemas
}  // namespace capnp


struct ArrayProto {
  ArrayProto() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    BYTE_ARRAY,
    INT16_ARRAY,
    UINT16_ARRAY,
    INT32_ARRAY,
    UINT32_ARRAY,
    INT64_ARRAY,
    UINT64_ARRAY,
    REAL32_ARRAY,
    REAL64_ARRAY,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87e317a98dbf317d, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ArrayProto::Reader {
public:
  typedef ArrayProto Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isByteArray() const;
  inline bool hasByteArray() const;
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader getByteArray() const;

  inline bool isInt16Array() const;
  inline bool hasInt16Array() const;
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader getInt16Array() const;

  inline bool isUint16Array() const;
  inline bool hasUint16Array() const;
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader getUint16Array() const;

  inline bool isInt32Array() const;
  inline bool hasInt32Array() const;
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader getInt32Array() const;

  inline bool isUint32Array() const;
  inline bool hasUint32Array() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getUint32Array() const;

  inline bool isInt64Array() const;
  inline bool hasInt64Array() const;
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader getInt64Array() const;

  inline bool isUint64Array() const;
  inline bool hasUint64Array() const;
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader getUint64Array() const;

  inline bool isReal32Array() const;
  inline bool hasReal32Array() const;
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader getReal32Array() const;

  inline bool isReal64Array() const;
  inline bool hasReal64Array() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getReal64Array() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ArrayProto::Builder {
public:
  typedef ArrayProto Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isByteArray();
  inline bool hasByteArray();
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder getByteArray();
  inline void setByteArray( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setByteArray(::kj::ArrayPtr<const  ::uint8_t> value);
  inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder initByteArray(unsigned int size);
  inline void adoptByteArray(::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> disownByteArray();

  inline bool isInt16Array();
  inline bool hasInt16Array();
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder getInt16Array();
  inline void setInt16Array( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInt16Array(::kj::ArrayPtr<const  ::int16_t> value);
  inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder initInt16Array(unsigned int size);
  inline void adoptInt16Array(::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> disownInt16Array();

  inline bool isUint16Array();
  inline bool hasUint16Array();
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder getUint16Array();
  inline void setUint16Array( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setUint16Array(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder initUint16Array(unsigned int size);
  inline void adoptUint16Array(::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> disownUint16Array();

  inline bool isInt32Array();
  inline bool hasInt32Array();
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder getInt32Array();
  inline void setInt32Array( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInt32Array(::kj::ArrayPtr<const  ::int32_t> value);
  inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder initInt32Array(unsigned int size);
  inline void adoptInt32Array(::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> disownInt32Array();

  inline bool isUint32Array();
  inline bool hasUint32Array();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getUint32Array();
  inline void setUint32Array( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setUint32Array(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initUint32Array(unsigned int size);
  inline void adoptUint32Array(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownUint32Array();

  inline bool isInt64Array();
  inline bool hasInt64Array();
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder getInt64Array();
  inline void setInt64Array( ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setInt64Array(::kj::ArrayPtr<const  ::int64_t> value);
  inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder initInt64Array(unsigned int size);
  inline void adoptInt64Array(::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>> disownInt64Array();

  inline bool isUint64Array();
  inline bool hasUint64Array();
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder getUint64Array();
  inline void setUint64Array( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setUint64Array(::kj::ArrayPtr<const  ::uint64_t> value);
  inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder initUint64Array(unsigned int size);
  inline void adoptUint64Array(::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> disownUint64Array();

  inline bool isReal32Array();
  inline bool hasReal32Array();
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder getReal32Array();
  inline void setReal32Array( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setReal32Array(::kj::ArrayPtr<const float> value);
  inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder initReal32Array(unsigned int size);
  inline void adoptReal32Array(::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> disownReal32Array();

  inline bool isReal64Array();
  inline bool hasReal64Array();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getReal64Array();
  inline void setReal64Array( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setReal64Array(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initReal64Array(unsigned int size);
  inline void adoptReal64Array(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownReal64Array();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ArrayProto::Pipeline {
public:
  typedef ArrayProto Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::ArrayProto::Which ArrayProto::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::ArrayProto::Which ArrayProto::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool ArrayProto::Reader::isByteArray() const {
  return which() == ArrayProto::BYTE_ARRAY;
}
inline bool ArrayProto::Builder::isByteArray() {
  return which() == ArrayProto::BYTE_ARRAY;
}
inline bool ArrayProto::Reader::hasByteArray() const {
  if (which() != ArrayProto::BYTE_ARRAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ArrayProto::Builder::hasByteArray() {
  if (which() != ArrayProto::BYTE_ARRAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader ArrayProto::Reader::getByteArray() const {
  KJ_IREQUIRE((which() == ArrayProto::BYTE_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::getByteArray() {
  KJ_IREQUIRE((which() == ArrayProto::BYTE_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayProto::Builder::setByteArray( ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::BYTE_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ArrayProto::Builder::setByteArray(::kj::ArrayPtr<const  ::uint8_t> value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::BYTE_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::initByteArray(unsigned int size) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::BYTE_ARRAY);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ArrayProto::Builder::adoptByteArray(
    ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::BYTE_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>> ArrayProto::Builder::disownByteArray() {
  KJ_IREQUIRE((which() == ArrayProto::BYTE_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint8_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayProto::Reader::isInt16Array() const {
  return which() == ArrayProto::INT16_ARRAY;
}
inline bool ArrayProto::Builder::isInt16Array() {
  return which() == ArrayProto::INT16_ARRAY;
}
inline bool ArrayProto::Reader::hasInt16Array() const {
  if (which() != ArrayProto::INT16_ARRAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ArrayProto::Builder::hasInt16Array() {
  if (which() != ArrayProto::INT16_ARRAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader ArrayProto::Reader::getInt16Array() const {
  KJ_IREQUIRE((which() == ArrayProto::INT16_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::getInt16Array() {
  KJ_IREQUIRE((which() == ArrayProto::INT16_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayProto::Builder::setInt16Array( ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT16_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ArrayProto::Builder::setInt16Array(::kj::ArrayPtr<const  ::int16_t> value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT16_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::initInt16Array(unsigned int size) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT16_ARRAY);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ArrayProto::Builder::adoptInt16Array(
    ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT16_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>> ArrayProto::Builder::disownInt16Array() {
  KJ_IREQUIRE((which() == ArrayProto::INT16_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayProto::Reader::isUint16Array() const {
  return which() == ArrayProto::UINT16_ARRAY;
}
inline bool ArrayProto::Builder::isUint16Array() {
  return which() == ArrayProto::UINT16_ARRAY;
}
inline bool ArrayProto::Reader::hasUint16Array() const {
  if (which() != ArrayProto::UINT16_ARRAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ArrayProto::Builder::hasUint16Array() {
  if (which() != ArrayProto::UINT16_ARRAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader ArrayProto::Reader::getUint16Array() const {
  KJ_IREQUIRE((which() == ArrayProto::UINT16_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::getUint16Array() {
  KJ_IREQUIRE((which() == ArrayProto::UINT16_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayProto::Builder::setUint16Array( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT16_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ArrayProto::Builder::setUint16Array(::kj::ArrayPtr<const  ::uint16_t> value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT16_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::initUint16Array(unsigned int size) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT16_ARRAY);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ArrayProto::Builder::adoptUint16Array(
    ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT16_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> ArrayProto::Builder::disownUint16Array() {
  KJ_IREQUIRE((which() == ArrayProto::UINT16_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayProto::Reader::isInt32Array() const {
  return which() == ArrayProto::INT32_ARRAY;
}
inline bool ArrayProto::Builder::isInt32Array() {
  return which() == ArrayProto::INT32_ARRAY;
}
inline bool ArrayProto::Reader::hasInt32Array() const {
  if (which() != ArrayProto::INT32_ARRAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ArrayProto::Builder::hasInt32Array() {
  if (which() != ArrayProto::INT32_ARRAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader ArrayProto::Reader::getInt32Array() const {
  KJ_IREQUIRE((which() == ArrayProto::INT32_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::getInt32Array() {
  KJ_IREQUIRE((which() == ArrayProto::INT32_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayProto::Builder::setInt32Array( ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT32_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ArrayProto::Builder::setInt32Array(::kj::ArrayPtr<const  ::int32_t> value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT32_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::initInt32Array(unsigned int size) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT32_ARRAY);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ArrayProto::Builder::adoptInt32Array(
    ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT32_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>> ArrayProto::Builder::disownInt32Array() {
  KJ_IREQUIRE((which() == ArrayProto::INT32_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayProto::Reader::isUint32Array() const {
  return which() == ArrayProto::UINT32_ARRAY;
}
inline bool ArrayProto::Builder::isUint32Array() {
  return which() == ArrayProto::UINT32_ARRAY;
}
inline bool ArrayProto::Reader::hasUint32Array() const {
  if (which() != ArrayProto::UINT32_ARRAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ArrayProto::Builder::hasUint32Array() {
  if (which() != ArrayProto::UINT32_ARRAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader ArrayProto::Reader::getUint32Array() const {
  KJ_IREQUIRE((which() == ArrayProto::UINT32_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::getUint32Array() {
  KJ_IREQUIRE((which() == ArrayProto::UINT32_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayProto::Builder::setUint32Array( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT32_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ArrayProto::Builder::setUint32Array(::kj::ArrayPtr<const  ::uint32_t> value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT32_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::initUint32Array(unsigned int size) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT32_ARRAY);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ArrayProto::Builder::adoptUint32Array(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT32_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> ArrayProto::Builder::disownUint32Array() {
  KJ_IREQUIRE((which() == ArrayProto::UINT32_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayProto::Reader::isInt64Array() const {
  return which() == ArrayProto::INT64_ARRAY;
}
inline bool ArrayProto::Builder::isInt64Array() {
  return which() == ArrayProto::INT64_ARRAY;
}
inline bool ArrayProto::Reader::hasInt64Array() const {
  if (which() != ArrayProto::INT64_ARRAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ArrayProto::Builder::hasInt64Array() {
  if (which() != ArrayProto::INT64_ARRAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader ArrayProto::Reader::getInt64Array() const {
  KJ_IREQUIRE((which() == ArrayProto::INT64_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::getInt64Array() {
  KJ_IREQUIRE((which() == ArrayProto::INT64_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayProto::Builder::setInt64Array( ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT64_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ArrayProto::Builder::setInt64Array(::kj::ArrayPtr<const  ::int64_t> value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT64_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::initInt64Array(unsigned int size) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT64_ARRAY);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ArrayProto::Builder::adoptInt64Array(
    ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::INT64_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>> ArrayProto::Builder::disownInt64Array() {
  KJ_IREQUIRE((which() == ArrayProto::INT64_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::int64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayProto::Reader::isUint64Array() const {
  return which() == ArrayProto::UINT64_ARRAY;
}
inline bool ArrayProto::Builder::isUint64Array() {
  return which() == ArrayProto::UINT64_ARRAY;
}
inline bool ArrayProto::Reader::hasUint64Array() const {
  if (which() != ArrayProto::UINT64_ARRAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ArrayProto::Builder::hasUint64Array() {
  if (which() != ArrayProto::UINT64_ARRAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader ArrayProto::Reader::getUint64Array() const {
  KJ_IREQUIRE((which() == ArrayProto::UINT64_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::getUint64Array() {
  KJ_IREQUIRE((which() == ArrayProto::UINT64_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayProto::Builder::setUint64Array( ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT64_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ArrayProto::Builder::setUint64Array(::kj::ArrayPtr<const  ::uint64_t> value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT64_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::initUint64Array(unsigned int size) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT64_ARRAY);
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ArrayProto::Builder::adoptUint64Array(
    ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::UINT64_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>> ArrayProto::Builder::disownUint64Array() {
  KJ_IREQUIRE((which() == ArrayProto::UINT64_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint64_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayProto::Reader::isReal32Array() const {
  return which() == ArrayProto::REAL32_ARRAY;
}
inline bool ArrayProto::Builder::isReal32Array() {
  return which() == ArrayProto::REAL32_ARRAY;
}
inline bool ArrayProto::Reader::hasReal32Array() const {
  if (which() != ArrayProto::REAL32_ARRAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ArrayProto::Builder::hasReal32Array() {
  if (which() != ArrayProto::REAL32_ARRAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader ArrayProto::Reader::getReal32Array() const {
  KJ_IREQUIRE((which() == ArrayProto::REAL32_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::getReal32Array() {
  KJ_IREQUIRE((which() == ArrayProto::REAL32_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayProto::Builder::setReal32Array( ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::REAL32_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ArrayProto::Builder::setReal32Array(::kj::ArrayPtr<const float> value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::REAL32_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::initReal32Array(unsigned int size) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::REAL32_ARRAY);
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ArrayProto::Builder::adoptReal32Array(
    ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::REAL32_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>> ArrayProto::Builder::disownReal32Array() {
  KJ_IREQUIRE((which() == ArrayProto::REAL32_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<float,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ArrayProto::Reader::isReal64Array() const {
  return which() == ArrayProto::REAL64_ARRAY;
}
inline bool ArrayProto::Builder::isReal64Array() {
  return which() == ArrayProto::REAL64_ARRAY;
}
inline bool ArrayProto::Reader::hasReal64Array() const {
  if (which() != ArrayProto::REAL64_ARRAY) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ArrayProto::Builder::hasReal64Array() {
  if (which() != ArrayProto::REAL64_ARRAY) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader ArrayProto::Reader::getReal64Array() const {
  KJ_IREQUIRE((which() == ArrayProto::REAL64_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::getReal64Array() {
  KJ_IREQUIRE((which() == ArrayProto::REAL64_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ArrayProto::Builder::setReal64Array( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::REAL64_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ArrayProto::Builder::setReal64Array(::kj::ArrayPtr<const double> value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::REAL64_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder ArrayProto::Builder::initReal64Array(unsigned int size) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::REAL64_ARRAY);
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ArrayProto::Builder::adoptReal64Array(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  _builder.setDataField<ArrayProto::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, ArrayProto::REAL64_ARRAY);
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> ArrayProto::Builder::disownReal64Array() {
  KJ_IREQUIRE((which() == ArrayProto::REAL64_ARRAY),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


