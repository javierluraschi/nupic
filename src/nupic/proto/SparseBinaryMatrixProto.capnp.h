// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: SparseBinaryMatrixProto.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cae029f961720cf8);

}  // namespace schemas
}  // namespace capnp


struct SparseBinaryMatrixProto {
  SparseBinaryMatrixProto() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cae029f961720cf8, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class SparseBinaryMatrixProto::Reader {
public:
  typedef SparseBinaryMatrixProto Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getNumRows() const;

  inline  ::uint32_t getNumColumns() const;

  inline bool hasIndices() const;
  inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader getIndices() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class SparseBinaryMatrixProto::Builder {
public:
  typedef SparseBinaryMatrixProto Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getNumRows();
  inline void setNumRows( ::uint32_t value);

  inline  ::uint32_t getNumColumns();
  inline void setNumColumns( ::uint32_t value);

  inline bool hasIndices();
  inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder getIndices();
  inline void setIndices( ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value);
  inline void setIndices(::kj::ArrayPtr<const  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder initIndices(unsigned int size);
  inline void adoptIndices(::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> disownIndices();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class SparseBinaryMatrixProto::Pipeline {
public:
  typedef SparseBinaryMatrixProto Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::uint32_t SparseBinaryMatrixProto::Reader::getNumRows() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SparseBinaryMatrixProto::Builder::getNumRows() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void SparseBinaryMatrixProto::Builder::setNumRows( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t SparseBinaryMatrixProto::Reader::getNumColumns() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t SparseBinaryMatrixProto::Builder::getNumColumns() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void SparseBinaryMatrixProto::Builder::setNumColumns( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool SparseBinaryMatrixProto::Reader::hasIndices() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool SparseBinaryMatrixProto::Builder::hasIndices() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader SparseBinaryMatrixProto::Reader::getIndices() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder SparseBinaryMatrixProto::Builder::getIndices() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void SparseBinaryMatrixProto::Builder::setIndices( ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void SparseBinaryMatrixProto::Builder::setIndices(::kj::ArrayPtr<const  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder SparseBinaryMatrixProto::Builder::initIndices(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void SparseBinaryMatrixProto::Builder::adoptIndices(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> SparseBinaryMatrixProto::Builder::disownIndices() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


