// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ClaClassifier.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include <nupic/proto/BitHistory.capnp.h>

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(c93387ae8c619663);
CAPNP_DECLARE_SCHEMA(a4b3f5c9a3089f85);
CAPNP_DECLARE_SCHEMA(c82273ce29535bf2);

}  // namespace schemas
}  // namespace capnp


struct ClaClassifierProto {
  ClaClassifierProto() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct StepBitHistories;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c93387ae8c619663, 5, 6)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ClaClassifierProto::StepBitHistories {
  StepBitHistories() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct IndexBitHistory;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a4b3f5c9a3089f85, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ClaClassifierProto::StepBitHistories::IndexBitHistory {
  IndexBitHistory() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c82273ce29535bf2, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ClaClassifierProto::Reader {
public:
  typedef ClaClassifierProto Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSteps() const;
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader getSteps() const;

  inline double getAlpha() const;

  inline double getActValueAlpha() const;

  inline  ::uint32_t getLearnIteration() const;

  inline  ::uint32_t getRecordNumMinusLearnIteration() const;

  inline bool getRecordNumMinusLearnIterationSet() const;

  inline  ::uint32_t getMaxSteps() const;

  inline bool hasPatternNZHistory() const;
  inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader getPatternNZHistory() const;

  inline bool hasIterationNumHistory() const;
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader getIterationNumHistory() const;

  inline bool hasActiveBitHistory() const;
  inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>::Reader getActiveBitHistory() const;

  inline  ::uint32_t getMaxBucketIdx() const;

  inline bool hasActualValues() const;
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader getActualValues() const;

  inline bool hasActualValuesSet() const;
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader getActualValuesSet() const;

  inline  ::uint16_t getVersion() const;

  inline  ::uint8_t getVerbosity() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ClaClassifierProto::Builder {
public:
  typedef ClaClassifierProto Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSteps();
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder getSteps();
  inline void setSteps( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setSteps(::kj::ArrayPtr<const  ::uint16_t> value);
  inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder initSteps(unsigned int size);
  inline void adoptSteps(::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> disownSteps();

  inline double getAlpha();
  inline void setAlpha(double value);

  inline double getActValueAlpha();
  inline void setActValueAlpha(double value);

  inline  ::uint32_t getLearnIteration();
  inline void setLearnIteration( ::uint32_t value);

  inline  ::uint32_t getRecordNumMinusLearnIteration();
  inline void setRecordNumMinusLearnIteration( ::uint32_t value);

  inline bool getRecordNumMinusLearnIterationSet();
  inline void setRecordNumMinusLearnIterationSet(bool value);

  inline  ::uint32_t getMaxSteps();
  inline void setMaxSteps( ::uint32_t value);

  inline bool hasPatternNZHistory();
  inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder getPatternNZHistory();
  inline void setPatternNZHistory( ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value);
  inline void setPatternNZHistory(::kj::ArrayPtr<const  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader> value);
  inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder initPatternNZHistory(unsigned int size);
  inline void adoptPatternNZHistory(::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> disownPatternNZHistory();

  inline bool hasIterationNumHistory();
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder getIterationNumHistory();
  inline void setIterationNumHistory( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setIterationNumHistory(::kj::ArrayPtr<const  ::uint32_t> value);
  inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder initIterationNumHistory(unsigned int size);
  inline void adoptIterationNumHistory(::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> disownIterationNumHistory();

  inline bool hasActiveBitHistory();
  inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>::Builder getActiveBitHistory();
  inline void setActiveBitHistory( ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>::Builder initActiveBitHistory(unsigned int size);
  inline void adoptActiveBitHistory(::capnp::Orphan< ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>> disownActiveBitHistory();

  inline  ::uint32_t getMaxBucketIdx();
  inline void setMaxBucketIdx( ::uint32_t value);

  inline bool hasActualValues();
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder getActualValues();
  inline void setActualValues( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setActualValues(::kj::ArrayPtr<const double> value);
  inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder initActualValues(unsigned int size);
  inline void adoptActualValues(::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> disownActualValues();

  inline bool hasActualValuesSet();
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder getActualValuesSet();
  inline void setActualValuesSet( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value);
  inline void setActualValuesSet(::kj::ArrayPtr<const bool> value);
  inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder initActualValuesSet(unsigned int size);
  inline void adoptActualValuesSet(::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value);
  inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> disownActualValuesSet();

  inline  ::uint16_t getVersion();
  inline void setVersion( ::uint16_t value);

  inline  ::uint8_t getVerbosity();
  inline void setVerbosity( ::uint8_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ClaClassifierProto::Pipeline {
public:
  typedef ClaClassifierProto Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ClaClassifierProto::StepBitHistories::Reader {
public:
  typedef StepBitHistories Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSteps() const;

  inline bool hasBitHistories() const;
  inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>::Reader getBitHistories() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ClaClassifierProto::StepBitHistories::Builder {
public:
  typedef StepBitHistories Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getSteps();
  inline void setSteps( ::uint32_t value);

  inline bool hasBitHistories();
  inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>::Builder getBitHistories();
  inline void setBitHistories( ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>::Builder initBitHistories(unsigned int size);
  inline void adoptBitHistories(::capnp::Orphan< ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>> disownBitHistories();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ClaClassifierProto::StepBitHistories::Pipeline {
public:
  typedef StepBitHistories Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ClaClassifierProto::StepBitHistories::IndexBitHistory::Reader {
public:
  typedef IndexBitHistory Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getIndex() const;

  inline bool hasHistory() const;
  inline  ::BitHistoryProto::Reader getHistory() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ClaClassifierProto::StepBitHistories::IndexBitHistory::Builder {
public:
  typedef IndexBitHistory Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getIndex();
  inline void setIndex( ::uint32_t value);

  inline bool hasHistory();
  inline  ::BitHistoryProto::Builder getHistory();
  inline void setHistory( ::BitHistoryProto::Reader value);
  inline  ::BitHistoryProto::Builder initHistory();
  inline void adoptHistory(::capnp::Orphan< ::BitHistoryProto>&& value);
  inline ::capnp::Orphan< ::BitHistoryProto> disownHistory();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ClaClassifierProto::StepBitHistories::IndexBitHistory::Pipeline {
public:
  typedef IndexBitHistory Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::BitHistoryProto::Pipeline getHistory();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ClaClassifierProto::Reader::hasSteps() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ClaClassifierProto::Builder::hasSteps() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader ClaClassifierProto::Reader::getSteps() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder ClaClassifierProto::Builder::getSteps() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ClaClassifierProto::Builder::setSteps( ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void ClaClassifierProto::Builder::setSteps(::kj::ArrayPtr<const  ::uint16_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>::Builder ClaClassifierProto::Builder::initSteps(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ClaClassifierProto::Builder::adoptSteps(
    ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>> ClaClassifierProto::Builder::disownSteps() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint16_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double ClaClassifierProto::Reader::getAlpha() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double ClaClassifierProto::Builder::getAlpha() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ClaClassifierProto::Builder::setAlpha(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double ClaClassifierProto::Reader::getActValueAlpha() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double ClaClassifierProto::Builder::getActValueAlpha() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ClaClassifierProto::Builder::setActValueAlpha(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ClaClassifierProto::Reader::getLearnIteration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ClaClassifierProto::Builder::getLearnIteration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline void ClaClassifierProto::Builder::setLearnIteration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ClaClassifierProto::Reader::getRecordNumMinusLearnIteration() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ClaClassifierProto::Builder::getRecordNumMinusLearnIteration() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS);
}
inline void ClaClassifierProto::Builder::setRecordNumMinusLearnIteration( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<5>() * ::capnp::ELEMENTS, value);
}

inline bool ClaClassifierProto::Reader::getRecordNumMinusLearnIterationSet() const {
  return _reader.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}

inline bool ClaClassifierProto::Builder::getRecordNumMinusLearnIterationSet() {
  return _builder.getDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS);
}
inline void ClaClassifierProto::Builder::setRecordNumMinusLearnIterationSet(bool value) {
  _builder.setDataField<bool>(
      ::capnp::bounded<192>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ClaClassifierProto::Reader::getMaxSteps() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ClaClassifierProto::Builder::getMaxSteps() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS);
}
inline void ClaClassifierProto::Builder::setMaxSteps( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<7>() * ::capnp::ELEMENTS, value);
}

inline bool ClaClassifierProto::Reader::hasPatternNZHistory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool ClaClassifierProto::Builder::hasPatternNZHistory() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader ClaClassifierProto::Reader::getPatternNZHistory() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder ClaClassifierProto::Builder::getPatternNZHistory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void ClaClassifierProto::Builder::setPatternNZHistory( ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline void ClaClassifierProto::Builder::setPatternNZHistory(::kj::ArrayPtr<const  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>::Builder ClaClassifierProto::Builder::initPatternNZHistory(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void ClaClassifierProto::Builder::adoptPatternNZHistory(
    ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>> ClaClassifierProto::Builder::disownPatternNZHistory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>,  ::capnp::Kind::LIST>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool ClaClassifierProto::Reader::hasIterationNumHistory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool ClaClassifierProto::Builder::hasIterationNumHistory() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader ClaClassifierProto::Reader::getIterationNumHistory() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ClaClassifierProto::Builder::getIterationNumHistory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void ClaClassifierProto::Builder::setIterationNumHistory( ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline void ClaClassifierProto::Builder::setIterationNumHistory(::kj::ArrayPtr<const  ::uint32_t> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>::Builder ClaClassifierProto::Builder::initIterationNumHistory(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void ClaClassifierProto::Builder::adoptIterationNumHistory(
    ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>> ClaClassifierProto::Builder::disownIterationNumHistory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::uint32_t,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool ClaClassifierProto::Reader::hasActiveBitHistory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool ClaClassifierProto::Builder::hasActiveBitHistory() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>::Reader ClaClassifierProto::Reader::getActiveBitHistory() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>::Builder ClaClassifierProto::Builder::getActiveBitHistory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void ClaClassifierProto::Builder::setActiveBitHistory( ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>::Builder ClaClassifierProto::Builder::initActiveBitHistory(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void ClaClassifierProto::Builder::adoptActiveBitHistory(
    ::capnp::Orphan< ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>> ClaClassifierProto::Builder::disownActiveBitHistory() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint32_t ClaClassifierProto::Reader::getMaxBucketIdx() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ClaClassifierProto::Builder::getMaxBucketIdx() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS);
}
inline void ClaClassifierProto::Builder::setMaxBucketIdx( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<8>() * ::capnp::ELEMENTS, value);
}

inline bool ClaClassifierProto::Reader::hasActualValues() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool ClaClassifierProto::Builder::hasActualValues() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader ClaClassifierProto::Reader::getActualValues() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder ClaClassifierProto::Builder::getActualValues() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void ClaClassifierProto::Builder::setActualValues( ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline void ClaClassifierProto::Builder::setActualValues(::kj::ArrayPtr<const double> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>::Builder ClaClassifierProto::Builder::initActualValues(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void ClaClassifierProto::Builder::adoptActualValues(
    ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>> ClaClassifierProto::Builder::disownActualValues() {
  return ::capnp::_::PointerHelpers< ::capnp::List<double,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool ClaClassifierProto::Reader::hasActualValuesSet() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool ClaClassifierProto::Builder::hasActualValuesSet() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader ClaClassifierProto::Reader::getActualValuesSet() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder ClaClassifierProto::Builder::getActualValuesSet() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void ClaClassifierProto::Builder::setActualValuesSet( ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline void ClaClassifierProto::Builder::setActualValuesSet(::kj::ArrayPtr<const bool> value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>::Builder ClaClassifierProto::Builder::initActualValuesSet(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void ClaClassifierProto::Builder::adoptActualValuesSet(
    ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>> ClaClassifierProto::Builder::disownActualValuesSet() {
  return ::capnp::_::PointerHelpers< ::capnp::List<bool,  ::capnp::Kind::PRIMITIVE>>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline  ::uint16_t ClaClassifierProto::Reader::getVersion() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ClaClassifierProto::Builder::getVersion() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS);
}
inline void ClaClassifierProto::Builder::setVersion( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<13>() * ::capnp::ELEMENTS, value);
}

inline  ::uint8_t ClaClassifierProto::Reader::getVerbosity() const {
  return _reader.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}

inline  ::uint8_t ClaClassifierProto::Builder::getVerbosity() {
  return _builder.getDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS);
}
inline void ClaClassifierProto::Builder::setVerbosity( ::uint8_t value) {
  _builder.setDataField< ::uint8_t>(
      ::capnp::bounded<25>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ClaClassifierProto::StepBitHistories::Reader::getSteps() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ClaClassifierProto::StepBitHistories::Builder::getSteps() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ClaClassifierProto::StepBitHistories::Builder::setSteps( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ClaClassifierProto::StepBitHistories::Reader::hasBitHistories() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ClaClassifierProto::StepBitHistories::Builder::hasBitHistories() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>::Reader ClaClassifierProto::StepBitHistories::Reader::getBitHistories() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>::Builder ClaClassifierProto::StepBitHistories::Builder::getBitHistories() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ClaClassifierProto::StepBitHistories::Builder::setBitHistories( ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>::Builder ClaClassifierProto::StepBitHistories::Builder::initBitHistories(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ClaClassifierProto::StepBitHistories::Builder::adoptBitHistories(
    ::capnp::Orphan< ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>> ClaClassifierProto::StepBitHistories::Builder::disownBitHistories() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ClaClassifierProto::StepBitHistories::IndexBitHistory,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t ClaClassifierProto::StepBitHistories::IndexBitHistory::Reader::getIndex() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ClaClassifierProto::StepBitHistories::IndexBitHistory::Builder::getIndex() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ClaClassifierProto::StepBitHistories::IndexBitHistory::Builder::setIndex( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool ClaClassifierProto::StepBitHistories::IndexBitHistory::Reader::hasHistory() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ClaClassifierProto::StepBitHistories::IndexBitHistory::Builder::hasHistory() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::BitHistoryProto::Reader ClaClassifierProto::StepBitHistories::IndexBitHistory::Reader::getHistory() const {
  return ::capnp::_::PointerHelpers< ::BitHistoryProto>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::BitHistoryProto::Builder ClaClassifierProto::StepBitHistories::IndexBitHistory::Builder::getHistory() {
  return ::capnp::_::PointerHelpers< ::BitHistoryProto>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::BitHistoryProto::Pipeline ClaClassifierProto::StepBitHistories::IndexBitHistory::Pipeline::getHistory() {
  return  ::BitHistoryProto::Pipeline(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
inline void ClaClassifierProto::StepBitHistories::IndexBitHistory::Builder::setHistory( ::BitHistoryProto::Reader value) {
  ::capnp::_::PointerHelpers< ::BitHistoryProto>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::BitHistoryProto::Builder ClaClassifierProto::StepBitHistories::IndexBitHistory::Builder::initHistory() {
  return ::capnp::_::PointerHelpers< ::BitHistoryProto>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ClaClassifierProto::StepBitHistories::IndexBitHistory::Builder::adoptHistory(
    ::capnp::Orphan< ::BitHistoryProto>&& value) {
  ::capnp::_::PointerHelpers< ::BitHistoryProto>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::BitHistoryProto> ClaClassifierProto::StepBitHistories::IndexBitHistory::Builder::disownHistory() {
  return ::capnp::_::PointerHelpers< ::BitHistoryProto>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


