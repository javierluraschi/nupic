// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: ConnectionsProto.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(a60a2cb3c7dc0231);
CAPNP_DECLARE_SCHEMA(f65cebfce8a328e6);
CAPNP_DECLARE_SCHEMA(d195dcd37697f09e);
CAPNP_DECLARE_SCHEMA(ff2e728565b43cc6);

}  // namespace schemas
}  // namespace capnp


struct ConnectionsProto {
  ConnectionsProto() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct SynapseProto;
  struct SegmentProto;
  struct CellProto;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a60a2cb3c7dc0231, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ConnectionsProto::SynapseProto {
  SynapseProto() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f65cebfce8a328e6, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ConnectionsProto::SegmentProto {
  SegmentProto() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d195dcd37697f09e, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct ConnectionsProto::CellProto {
  CellProto() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ff2e728565b43cc6, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class ConnectionsProto::Reader {
public:
  typedef ConnectionsProto Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasCells() const;
  inline  ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>::Reader getCells() const;

  inline  ::uint16_t getVersion() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ConnectionsProto::Builder {
public:
  typedef ConnectionsProto Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasCells();
  inline  ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>::Builder getCells();
  inline void setCells( ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>::Builder initCells(unsigned int size);
  inline void adoptCells(::capnp::Orphan< ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>> disownCells();

  inline  ::uint16_t getVersion();
  inline void setVersion( ::uint16_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ConnectionsProto::Pipeline {
public:
  typedef ConnectionsProto Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ConnectionsProto::SynapseProto::Reader {
public:
  typedef SynapseProto Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getPresynapticCell() const;

  inline float getPermanence() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ConnectionsProto::SynapseProto::Builder {
public:
  typedef SynapseProto Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getPresynapticCell();
  inline void setPresynapticCell( ::uint32_t value);

  inline float getPermanence();
  inline void setPermanence(float value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ConnectionsProto::SynapseProto::Pipeline {
public:
  typedef SynapseProto Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ConnectionsProto::SegmentProto::Reader {
public:
  typedef SegmentProto Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSynapses() const;
  inline  ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>::Reader getSynapses() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ConnectionsProto::SegmentProto::Builder {
public:
  typedef SegmentProto Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSynapses();
  inline  ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>::Builder getSynapses();
  inline void setSynapses( ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>::Builder initSynapses(unsigned int size);
  inline void adoptSynapses(::capnp::Orphan< ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>> disownSynapses();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ConnectionsProto::SegmentProto::Pipeline {
public:
  typedef SegmentProto Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class ConnectionsProto::CellProto::Reader {
public:
  typedef CellProto Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasSegments() const;
  inline  ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>::Reader getSegments() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class ConnectionsProto::CellProto::Builder {
public:
  typedef CellProto Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasSegments();
  inline  ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>::Builder getSegments();
  inline void setSegments( ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>::Builder initSegments(unsigned int size);
  inline void adoptSegments(::capnp::Orphan< ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>> disownSegments();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class ConnectionsProto::CellProto::Pipeline {
public:
  typedef CellProto Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool ConnectionsProto::Reader::hasCells() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ConnectionsProto::Builder::hasCells() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>::Reader ConnectionsProto::Reader::getCells() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>::Builder ConnectionsProto::Builder::getCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ConnectionsProto::Builder::setCells( ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>::Builder ConnectionsProto::Builder::initCells(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ConnectionsProto::Builder::adoptCells(
    ::capnp::Orphan< ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>> ConnectionsProto::Builder::disownCells() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::CellProto,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint16_t ConnectionsProto::Reader::getVersion() const {
  return _reader.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint16_t ConnectionsProto::Builder::getVersion() {
  return _builder.getDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ConnectionsProto::Builder::setVersion( ::uint16_t value) {
  _builder.setDataField< ::uint16_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t ConnectionsProto::SynapseProto::Reader::getPresynapticCell() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t ConnectionsProto::SynapseProto::Builder::getPresynapticCell() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void ConnectionsProto::SynapseProto::Builder::setPresynapticCell( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline float ConnectionsProto::SynapseProto::Reader::getPermanence() const {
  return _reader.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline float ConnectionsProto::SynapseProto::Builder::getPermanence() {
  return _builder.getDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void ConnectionsProto::SynapseProto::Builder::setPermanence(float value) {
  _builder.setDataField<float>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool ConnectionsProto::SegmentProto::Reader::hasSynapses() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ConnectionsProto::SegmentProto::Builder::hasSynapses() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>::Reader ConnectionsProto::SegmentProto::Reader::getSynapses() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>::Builder ConnectionsProto::SegmentProto::Builder::getSynapses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ConnectionsProto::SegmentProto::Builder::setSynapses( ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>::Builder ConnectionsProto::SegmentProto::Builder::initSynapses(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ConnectionsProto::SegmentProto::Builder::adoptSynapses(
    ::capnp::Orphan< ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>> ConnectionsProto::SegmentProto::Builder::disownSynapses() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SynapseProto,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool ConnectionsProto::CellProto::Reader::hasSegments() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool ConnectionsProto::CellProto::Builder::hasSegments() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>::Reader ConnectionsProto::CellProto::Reader::getSegments() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>::Builder ConnectionsProto::CellProto::Builder::getSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void ConnectionsProto::CellProto::Builder::setSegments( ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>::Builder ConnectionsProto::CellProto::Builder::initSegments(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void ConnectionsProto::CellProto::Builder::adoptSegments(
    ::capnp::Orphan< ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>> ConnectionsProto::CellProto::Builder::disownSegments() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::ConnectionsProto::SegmentProto,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


